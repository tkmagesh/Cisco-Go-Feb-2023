Magesh Kuppan

Schedule:
    Commence    : 9:00 AM
    Tea Break   : 10:30 AM (20 mins)
    Lunch Break : 12:30 PM (1 hour)
    Tea Break   : 3:30 PM (20 mins)
    Wind up     : 5:00 PM

Methodology:
    No powerpoint
    Lots of assignments

Software Requirements:
    * Go tools (https://go.dev/dl)
    * Visual Studio Code (https://code.visualstudio.com)
    * Go extension for Visual Studio Code (https://marketplace.visualstudio.com/items?itemName=golang.Go)

Repo:
    https://github.com/tkmagesh/cisco-go-feb-2023

Paradox of Choice (Barry Schwartz)

Why Go?
    * Simplified
        ONLY 25 keywords
        - No access modifiers (public, private, protected)
        - No class (only struct)
        - No inheritence (only composition)
        - No reference types (everything is a value in go)
        - No exceptions (only errors)
        - No "try catch finally" construct
        - No pointer arithmatic
        - No implicit type conversion

    * Lightweight
        - Close to hardware
        - Cross compile

    * Concurrency
        - Lightweight Concurrency Model (goroutine)
        - ~4KB (vs 2MB of OS thread)
        - Language support
            ex: go keyword, channel (data type), <- (channel operator), select case, range 
        - Standard Library
            - "sync" package
            - "sync/atomic" package


To run a go program
    go run <file_name.go>

To create a build
    go build <file_name.go>
    go build -o <binary_name> <file_name.go>

To get the list of supported platforms
    go tool dist list

To get the list of environment variables used by the "go" tool
    go env

To set the environment variables
    go env -w <var_1>=<val_1> <var_2>=<val_2>

To cross compile
    go env GOOS GOARCH
    GOOS=windows GOARCH=386 go build <file_name.go>

To do escape analysis
    go run -gcflags="-m" <file_name.go>
    go build -gcflags="-m" <file_name.go>
    

Go Datatypes
    string
    bool

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64 (real[float32] + imaginary[float32])
    complex128 (real[float64] + imaginary[float64])

    byte (alias for uint8)
    rune (alias for int32) (unicode character code point)


Variables
    Function scope
        - can use :=
        - cannot have unused variables
    Package scope
        - cannot use :=
        - can have unused variables
    